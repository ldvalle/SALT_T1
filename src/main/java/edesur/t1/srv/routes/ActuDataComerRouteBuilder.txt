package edesur.t1.srv.routes;

import edesur.t1.srv.errores.ErrorResponse;
import edesur.t1.srv.errores.ErrorType;
import edesur.t1.srv.model.ActuDataComerResponse;
import edesur.t1.srv.model.DataClienteResponse;
import org.apache.camel.LoggingLevel;
import org.apache.camel.component.sql.SqlConstants;
import static org.apache.camel.builder.PredicateBuilder.not;


public class ActuDataComerRouteBuilder extends  BaseRouteBuilder {
    @Override
    public void configure() throws Exception {
        super.configure();

        from("direct:setDataComer")
                .routeId("setDataComer")
                .setHeader("numeroCliente", simple("${body.getNumeroSuministro}"))
                .setHeader("nroOrden", simple("${body.getNroOrden}"))
                .setHeader("nombreCliente", simple("${body.getNombreCliente}"))
                .setHeader("tipoDocumento", simple("${body.getTipoDocumento}"))
                .setHeader("nroDocumento", simple("${body.getNroDocumento}"))
                .setHeader("telefono", simple("${body.getTelefono}"))
                .transacted()
                .log(LoggingLevel.DEBUG, logname, "Actualizacion de datos comerciales ${header.numeroCliente}")
                .to("sql:classpath:sql/dataCliente.sql?dataSource=#SynergiaDS&outputType=SelectOne&outputClass=edesur.t1.srv.model.DataClienteResponse")
                .log("${body}")
                .log("${header." + SqlConstants.SQL_ROW_COUNT + "}")
                .choice()
                .when(header(SqlConstants.SQL_ROW_COUNT).isEqualTo(0))
                    .log(LoggingLevel.DEBUG, logname, "Cliente ${header.numeroCliente} no existe o esta en ciclo facturaci√≥n")
                    .setBody(constant(ErrorResponse.create(ErrorType.ClienteNoEnEstado)))
                .otherwise()
					.choice()
					.when(not (method(DataClienteResponse.class, "getEstadoCliente").isEqualTo("0")))
						.log(LoggingLevel.DEBUG, logname, "Cliente ${header.numeroCliente} no esta activo")
						.setBody(constant(ErrorResponse.create(ErrorType.ClienteNoEnEstado)))

					.when(not (method(DataClienteResponse.class, "getEstadoFacturacion").isEqualTo("0")))
						.log(LoggingLevel.DEBUG, logname, "Cliente ${header.numeroCliente} no en ciclo de facturacion")
						.setBody(constant(ErrorResponse.create(ErrorType.ClienteNoEnEstado)))

					//.when(method(DataClienteResponse.class, "getEsElectro").isEqualTo("D") and (header("nombreCliente").isNotNull()))
					//.when(ElectroCambioNombre)
					.when(method(DataClienteResponse.class, "getEsElectro").isEqualTo("S"))
						.log(LoggingLevel.DEBUG, logname, "Cliente ${header.numeroCliente} no puede cambiar nombre de cliente electrodependiente")
						.setBody(constant(ErrorResponse.create(ErrorType.ClienteNoEnEstado)))
					.otherwise()
						.log(LoggingLevel.DEBUG, logname, "Cliente ${header.numeroCliente} Nombre ${header.nombreCliente} Telefono ${header.telefono}: ${body}")
/*					
						.to("sql:classpath:sql/altaSeguro.sql?dataSource=#SynergiaDS")
						.to("sql:classpath:sql/altaArrie.sql?dataSource=#SynergiaDS")
						.setBody(constant(new AltaSeguroResponse()))
						.log(LoggingLevel.DEBUG, logname, "Cliente ${header.numeroCliente}: ${body}")
*/ 
                .end();


    }
}
